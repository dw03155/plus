<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="co.plus.prj.uam.mapper.MemberMapper">
    
																						<!-- 회원로그인 -->
	<!-- 회원정보 -->																					
	<select id="memberLogin" resultType="co.plus.prj.uam.vo.MemberVO">					
		 select 
		 		a.mem_id, 
		 		a.name, 
		 		a.pwd, 
		 		a.email, 
		 		a.mem_perm, 
		 		b.mem_st,
		 		a.co_url
		 from member a, mem_status b
		 where a.mem_id = b.mem_id and a.email = #{email} and a.pwd = #{pwd} and a.acc_st = 'using'
	</select>
	<!-- 회원 상태 온라인으로 -->
	<update id="loginStUpdate" parameterType="co.plus.prj.uam.vo.MemberVO">				
		<![CDATA[update mem_status set mem_st = 'online'
  		where mem_id = #{memId}
  		 and mem_st <> 'online' ]]>
	</update>
	<!-- 회원 상태 오프라인으로 -->
	<update id="loginoutStUpdate" parameterType="co.plus.prj.uam.vo.MemberVO">			
		<![CDATA[update mem_status set mem_st = 'offline'
  		where mem_id = #{memId}
  		 and mem_st <> 'offline' ]]>
	</update>
	
																						<!-- 회원가입 -->
	<!-- 회사 URL -->
	<select id="getCompany" resultType="co.plus.prj.uam.vo.MemberVO">				
		select co_url, co_name 
		from company
		where co_url = #{coUrl}
	</select>
	<!-- 메일 중복 테스트-->
	<select id="getMailCheck" resultType="co.plus.prj.uam.vo.MemberVO">
		select email
		from member
		where email = #{email}
	</select>
	<!-- 어드민회원입력 -->
	<insert id="newCompanyInsert1" parameterType="co.plus.prj.uam.vo.MemberVO">
		INSERT INTO MEMBER(MEM_ID, EMAIL, PWD, NAME, CO_url,MEM_PERM,acc_st)
		VALUES (MEMID.nextval, #{email}, #{pwd}, #{name}, #{coUrl}, 'ADMIN', 'using')
	</insert>
	<insert id="newCompanyInsert2" parameterType="co.plus.prj.uam.vo.MemberVO">
		INSERT INTO company(co_name, co_url)
		VALUES (#{coName}, #{coUrl})
	</insert>
	<!-- 회원상태 테이블 추가 -->
	<insert id="newCompanyInsert3" parameterType="co.plus.prj.uam.vo.MemberVO">  		
		INSERT INTO mem_status(mem_id, mem_st)
		VALUES ((select max(mem_id) from member), 'offline')
	</insert>
	
	<!-- 기존회사 회원입력 -->
	<insert id="exCompanyInsert1" parameterType="co.plus.prj.uam.vo.MemberVO">
		INSERT INTO MEMBER(MEM_ID, EMAIL, PWD, NAME, CO_url,acc_st)
		VALUES (MEMID.nextval, #{email}, #{pwd}, #{name}, #{coUrl},'using')
	</insert>
	<!-- 회원상태 테이블 추가 -->
	<insert id="exCompanyInsert2" parameterType="co.plus.prj.uam.vo.MemberVO">  		
		INSERT INTO mem_status(mem_id, mem_st)
		VALUES ((select max(mem_id) from member), 'offline')
	</insert>
	<!-- 기존회사 회원입력 -->
	<insert id="guestInsert2" parameterType="co.plus.prj.uam.vo.MemberVO">
		INSERT INTO MEMBER(MEM_ID, EMAIL, PWD, NAME, CO_url,MEM_PERM,acc_st)
		VALUES (MEMID.nextval, #{email}, #{pwd}, #{name}, #{coUrl},'GUEST', 'using')
	</insert>
	<!-- 회원상태 테이블 추가 -->
	<insert id="guestInsert" parameterType="co.plus.prj.uam.vo.MemberVO">  		
		INSERT INTO mem_status(mem_id, mem_st)
		VALUES ((select max(mem_id) from member), 'offline')
	</insert>
	
																						<!-- 회원정보수정(회원마이페이지) -->
	<!-- 회원정보 가져오기 -->
	<select id="memberInfo" resultType="co.plus.prj.uam.vo.MemberVO">
		select a.mem_id, a.email, a.pwd, a.name, a.wkpo
        , a.pers_tel, a.co_tel, a.dept, b.co_name
		from Member a , company b
		where a.co_url = b.co_url and a.mem_id = #{memId}
	</select>
	<!--  수정 -->
	<update id="nameUpdate" parameterType="co.plus.prj.uam.vo.MemberVO">
		update member 
		set name = #{name}
		where mem_id = #{memId}
	</update>
		<update id="wkpoUpdate" parameterType="co.plus.prj.uam.vo.MemberVO">
		update member 
		set wkpo = #{wkpo}
		where mem_id = #{memId}
	</update>
		<update id="persTelUpdate" parameterType="co.plus.prj.uam.vo.MemberVO">
		update member 
		set pers_Tel = #{persTel}
		where mem_id = #{memId}
	</update>
		<update id="coTelUpdate" parameterType="co.plus.prj.uam.vo.MemberVO">
		update member 
		set co_tel = #{coTel}
		where mem_id = #{memId}
	</update>
	<update id="deptUpdate" parameterType="co.plus.prj.uam.vo.MemberVO">
		update member 
		set dept = #{dept}
		where mem_id = #{memId}
	</update>
	<update id="pwdUpdate" parameterType="co.plus.prj.uam.vo.MemberVO">
		update member 
		set pwd = #{pwd}
		where mem_id = #{memId}
	</update>
	<update id="memberImgUpdate" parameterType="co.plus.prj.uam.vo.MemberVO">
		update member 
		set mem_img = #{memImg}
		where mem_id = #{memId}
	</update>
	<!-- 회사로고 가져오기 -->
	<select id="getLogo" resultType="co.plus.prj.uam.vo.MemberVO">
		select co_logo
		from company
		where co_url = #{coUrl}
	</select>
	<select id="getMemberImg" resultType="co.plus.prj.uam.vo.MemberVO">
		select mem_img
		from Member
		where mem_id = #{memId}
	</select>
	
	<!-- 회원상태 표시 -->
	<select id="memberStatus" resultType="co.plus.prj.uam.vo.MemberVO">
		select mem_st
		from mem_status
		where mem_id = #{memId}
	</select>
	<update id="memberOnline" parameterType="co.plus.prj.uam.vo.MemberVO">
		update mem_status
		set mem_st = 'online'
		where mem_id = #{memId}
	</update>
	<update id="memberOther" parameterType="co.plus.prj.uam.vo.MemberVO">
		update mem_status
		set mem_st = 'other'
		where mem_id = #{memId}
	</update>
	<update id="memberNotdesk" parameterType="co.plus.prj.uam.vo.MemberVO">
		update mem_status
		set mem_st = 'notdesk'
		where mem_id = #{memId}
	</update>
	<update id="memberOffline" parameterType="co.plus.prj.uam.vo.MemberVO">
		update mem_status
		set mem_st = 'offline'
		where mem_id = #{memId}
	</update>
	<update id="memberDelete" parameterType="co.plus.prj.uam.vo.MemberVO">
		update member 
		set acc_st = 'notused'
		where mem_id = #{memId}
	</update>

																						<!-- 회사정보 수정 -->
	<!-- 회사 이름 수정 -->																					
	<update id="companyNameUpdate" parameterType="co.plus.prj.uam.vo.MemberVO">
		update company set co_name = #{coName}
		where co_url = #{coUrl}
	</update>
	<!-- 회원로고 수정 -->
	<update id="companyLogoUpdate" parameterType="co.plus.prj.uam.vo.MemberVO">
		update company set co_logo = #{coLogo}
		where co_url = #{coUrl}
	</update>
	
																						<!-- 사용자 관리 -->
    <!-- 정상사용자 -->
    <select id="getUsingMemberList" resultType="co.plus.prj.uam.vo.MemberVO">
	   	<![CDATA[
	   	select mem_id, name, dept, wkpo, pers_tel, acc_st, mem_perm, email
		from member
		where co_url = #{coUrl} and acc_st = 'using' and mem_perm <> 'GUEST'
		]]>
	</select>
	<!-- 정상 사용자 삭제 -->
	<update id="usingOut" parameterType="co.plus.prj.uam.vo.MemberVO">
		update member set acc_st = 'notused'
		where mem_id = #{memId}
	</update>
	<!-- 관리자 사용자로 변경 -->
	<update id="adminDel" parameterType="co.plus.prj.uam.vo.MemberVO">
		update member set mem_perm = 'USER'
		where mem_id = #{memId}
	</update>
	<!-- 사용자 관리자로 변경 -->
	<update id="userDel" parameterType="co.plus.prj.uam.vo.MemberVO">
		update member set mem_perm = 'ADMIN'
		where mem_id = #{memId}
	</update>
	
	<!-- 사용중지 사용자 -->
	 <select id="getNotusedMemberList" resultType="co.plus.prj.uam.vo.MemberVO">
	   	<![CDATA[
	   	select mem_id, name, dept, wkpo, pers_tel, acc_st, mem_perm, email
		from member
		where co_url = #{coUrl} and acc_st = 'notused'
		]]>
	</select>
	
	<!-- 가입대기 사용자 -->
	<select id="getOutstandMemberList" resultType="co.plus.prj.uam.vo.MemberVO">
		<![CDATA[
		select mem_id, name, dept, wkpo, pers_tel, acc_st, mem_perm, email
		from member
		where co_url = #{coUrl} and acc_st = 'outstand' and mem_perm <> 'GUEST'
		]]>
	</select>
	<update id="outstandIn" parameterType="co.plus.prj.uam.vo.MemberVO">
		update member set acc_st = 'using'
		where mem_id = #{memId}
	</update>
	<update id="outstandOut" parameterType="co.plus.prj.uam.vo.MemberVO">
		update member set acc_st = 'notused'
		where mem_id = #{memId}
	</update>
	
	<!-- 게스트 사용자 -->
	<select id="getGuestMemberList" resultType="co.plus.prj.uam.vo.MemberVO">
		<![CDATA[
		select mem_id, name, dept, wkpo, pers_tel, acc_st, mem_perm, email
		from member
		where co_url = #{coUrl} and mem_perm = 'GUEST' and acc_st <> 'notused'
		]]>
	</select>
	<update id="guestIn" parameterType="co.plus.prj.uam.vo.MemberVO">
		update member set acc_st = 'using'
		where mem_id = #{memId}
	</update>
	<update id="guestOut" parameterType="co.plus.prj.uam.vo.MemberVO">
		update member set acc_st = 'notused'
		where mem_id = #{memId}
	</update>
	
																						<!-- 사용자 일괄등록 -->
	<insert id="AllMemberInsert1" parameterType="co.plus.prj.uam.vo.MemberVO">
		INSERT INTO MEMBER(MEM_ID, EMAIL, NAME, CO_url, dept, wkpo)
		VALUES (MEMID.nextval, #{email}, #{name}, #{coUrl}, #{dept}, #{wkpo})
	</insert>
	<!-- 회원상태 테이블 추가 -->
	<insert id="AllMemberInsert2" parameterType="co.plus.prj.uam.vo.MemberVO">  		
		INSERT INTO mem_status(mem_id, mem_st)
		VALUES ((select max(mem_id) from member), 'offline')
	</insert>
																						<!-- 회사프로젝트 관리 -->
	<!-- 회사프로젝트 관리 -->
	<select id="getCoPrjList" resultType="co.plus.prj.uam.vo.MemberVO">
		select a.prj_id, a.prj_ttl, 
		        (select count(prj_perm) from prj_parti where prj_perm = 'PM' and prj_id = a.prj_id) as pmCnt, 
		        (select count(mem_id) from prj_parti where prj_id = a.prj_id) as memCnt, 
		        (select count(*) from notice_writing where a.prj_id = prj_id) as notiCnt
		from project a
		where a.co_url = #{coUrl}  
		group by a.prj_id, a.prj_ttl
	</select>
	<!-- 회사 프로젝트 상세조회 -->
	<select id="getCoPrjInfo" resultType="co.plus.prj.uam.vo.MemberVO">
		select a.mem_id, a.name, a.email, a.dept, a.pers_Tel, c.prj_ttl, c.prj_id
		from member a, prj_parti b, project c
		where a.mem_id = b.mem_id and b.prj_id = c.prj_id 
        and b.prj_perm = 'PM' and c.prj_id = #{prjId}
	</select>
	<!-- 프로젝트 관리자 수정 -->
	<update id="coPrjPMChange" parameterType="co.plus.prj.uam.vo.MemberVO">
		UPDATE prj_parti 
		set prj_perm = 'USER'
		where mem_id = #{memId} and prj_id = #{prjId}
	</update>
	<update id="coPrjUserChange" parameterType="co.plus.prj.uam.vo.MemberVO">
		UPDATE prj_parti 
		set prj_perm = 'PM'
		where mem_id = #{memId} and prj_id = #{prjId}
	</update>
	<select id="prjUserList" resultType="co.plus.prj.uam.vo.MemberVO">
		select a.mem_id, a.name, a.email, a.dept, a.pers_Tel
        from member a, prj_parti b
        where prj_perm = 'USER' and a.mem_id = b.mem_id and b.prj_id = #{prjId}
	</select>
	
																							<!-- 카테고리관리 -->
	<!-- 카테고리 확인 -->
	<select id="getCategoryList" resultType="co.plus.prj.uam.vo.MemberVO">
		select a.ctgry_id, a.ctgry_name, count(prj_id) as cnt
	      from category a full outer join project b on (a.ctgry_id = b.ctgry_id)
	          where 1=1
	          and a.co_url = #{coUrl}
	          and a.ctgry_name is not null
	      group by a.ctgry_id, a.ctgry_name 
          order by a.ctgry_id
	</select>
	<!-- 카테고리 삭제, 프로젝트 업데이트 -->
	<update id="prjCategoryUpdate" parameterType="co.plus.prj.uam.vo.MemberVO">
		update project set ctgry_id = null
		where ctgry_id = #{ctgryId}
	</update>
	<delete id="prjCategoryDelete" parameterType="co.plus.prj.uam.vo.MemberVO">
		delete from category 
		where ctgry_id = #{ctgryId}
	</delete>
	<!-- 카테고리 추가 -->
	<insert id="categoryInsert" parameterType="co.plus.prj.uam.vo.MemberVO">
		insert into category values(CTGRYID.nextval,#{ctgryName},#{coUrl})
	</insert>
	
	<!-- 첨부파일 모아보기 -->
	<select id="textFileList" resultType="co.plus.prj.pnw.vo.PNWVO">
		SELECT DISTINCT c.TXT_FILE, b.NOTI_ID, a.NAME, a.MEM_ID, f.PRJ_ID, f.PRJ_TTL
		FROM  MEMBER a, NOTICE_WRITING b,TEXT C, PROJECT f, prj_parti g
		WHERE c.noti_id = b.noti_id
		      and b.prj_id = f.prj_id
		      and f.prj_id = g.prj_id
		      and a.co_url = f.co_url
		      and c.TXT_FILE is not null
		      and a.mem_id = #{memId}
	</select>
	<select id="subTaskFileList" resultType="co.plus.prj.pnw.vo.PNWVO">
		SELECT DISTINCT e.SUBTSK_FILE, b.NOTI_ID, a.NAME, a.MEM_ID, f.PRJ_ID, f.PRJ_TTL
		FROM  MEMBER a, NOTICE_WRITING b, SUBTASK e, PROJECT f, prj_parti g
		WHERE e.noti_id = b.noti_id
		      and b.prj_id = f.prj_id
		      and f.prj_id = g.prj_id
		      and a.co_url = f.co_url
		      and e.subtsk_file is not null 
		      and a.mem_id = #{memId}
	</select>
	<select id="taskFileList" resultType="co.plus.prj.pnw.vo.PNWVO">
		SELECT DISTINCT d.TSK_FILE, b.NOTI_ID, a.NAME, a.MEM_ID, f.PRJ_ID, f.PRJ_TTL
		FROM  MEMBER a, NOTICE_WRITING b, TASK d, PROJECT f, prj_parti g
		WHERE d.noti_id = b.noti_id
		      and b.prj_id = f.prj_id
		      and f.prj_id = g.prj_id
		      and a.co_url = f.co_url
		      and d.TSK_FILE is not null
		      and a.mem_id = #{memId}
	</select>
	
	
	
	
	
	
	
	
	
	
	
</mapper>