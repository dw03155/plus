<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="co.plus.prj.pnw.mapper.PNWMapper">

	<!-- 새 프로젝트-->
	<insert id="prjInsert" parameterType="co.plus.prj.pnw.vo.PNWVO">
		insert into project(prj_id, prj_knd, prj_ttl, prj_cntn, prj_open_perm, ctgry_id, co_url)
		values (prjid.nextval, #{prjKnd}, #{prjTtl}, #{prjCntn}, #{prjOpenPerm}, #{ctgryId}, #{coUrl})
	</insert>

	<!-- 새 프로젝트 : PM 삽입-->
	<insert id="prjPMInsert" parameterType="co.plus.prj.pnw.vo.PNWVO">
		insert into prj_parti(prj_id, mem_id, prj_perm)
		values ((select max(prj_id) from project), #{memId}, 'pm')
	</insert>

	<!-- 메뉴 : 카테고리 이름 출력-->
	<select id="ctgryList" resultType="co.plus.prj.pnw.vo.PNWVO">
		select ctgry_id, ctgry_name
		from category
		where co_url = #{coUrl}
		order by ctgry_id asc
	</select>

	<!-- 내 프로젝트 : 즐겨찾기 -->
	<select id="favorMyPrj" resultType="co.plus.prj.pnw.vo.PNWVO">
		select a.prj_id, a.prj_ttl, c.prj_color, a.prj_knd, a.prj_open_perm,
			(select count(*) from prj_parti where prj_id = a.prj_id) as partiCnt
		from project a, member b, prj_parti c
		where a.co_url = b.co_url        
			and b.mem_id = c.mem_id
			and a.prj_id = c.prj_id            
			and b.mem_id = #{memId}
            and a.prj_id in(select prj_id from favorite d where d.mem_id = b.mem_id)
        order by a.prj_id desc
	</select>

	<!-- 내 프로젝트 : 즐겨찾기X -->
	<select id="noMyPrj" resultType="co.plus.prj.pnw.vo.PNWVO">
		select a.prj_id, a.prj_ttl, c.prj_color, a.prj_knd, a.prj_open_perm,
			(select count(*) from prj_parti where prj_id = a.prj_id) as partiCnt
		from project a, member b, prj_parti c
		where a.co_url = b.co_url        
			and b.mem_id = c.mem_id
			and a.prj_id = c.prj_id            
			and b.mem_id = #{memId}
            and a.prj_id not in(select prj_id from favorite d where d.mem_id = b.mem_id)
        order by a.prj_id desc
	</select>

	<!-- 즐겨찾기 추가 -->
	<insert id="prjFavorite"  parameterType="co.plus.prj.pnw.vo.PNWVO">
		insert into favorite
		values(#{memId}, #{prjId})
	</insert>
	
	<!-- 즐겨찾기 삭제 -->
	<delete id="prjNoFavor" parameterType="co.plus.prj.pnw.vo.PNWVO">
		delete from favorite
		where mem_id = #{memId} and prj_id = #{prjId}
	</delete>

	<!-- 프로젝트 색깔 변경 -->
	<update id="prjColorUpdate" parameterType="co.plus.prj.pnw.vo.PNWVO">
		update prj_parti
		set prj_color = #{prjColor}
		where mem_id = #{memId} and prj_id = #{prjId}
	</update>
	
	<!-- 프로젝트 폴더 변경 -->
	<insert id="prjFolderSet" parameterType="co.plus.prj.pnw.vo.PNWVO">
		insert into prj_fold
		values(#{foldId}, #{prjId})
	</insert>

	<!-- 전체 프로젝트 -->
	<select id="openProject" resultType="co.plus.prj.pnw.vo.PNWVO">
		select a.prj_id, a.prj_ttl, a.prj_cntn, a.ctgry_id, b.mem_id, c.name, c.wkpo,
    		(select count(*) from prj_parti where prj_id = a.prj_id) as partiCnt,
    		(case when exists
    				(select * from member where mem_id = #{memId} and co_url = #{coUrl} and mem_perm = 'guest')
    				then 0 else 1 end) as partiyn
		from project a, prj_parti b, member c 
    	where a.prj_knd ='C'
        	and a.prj_id = b. prj_id
        	and a.co_url = #{coUrl}
        	and b.mem_id = c.mem_id
        	and b.prj_perm = 'pm'
        <!-- 프로젝트 명으로 검색 -->
		<if test="prjTtl != null and prjTtl != ''">
			and a.prj_ttl like '%' || #{prjTtl} || '%'
		</if>
        union
		select d.prj_id, d.prj_ttl, d.prj_cntn, d.ctgry_id, e.mem_id, f.name, f.wkpo,
			(select count(*) from prj_parti where prj_id = d.prj_id) as partiCnt,
        	(case when exists
        			(select * from prj_parti where mem_id = #{memId} and prj_id = d.prj_id)
        			then 1 else 0 end) as partiyn
		from project d, prj_parti e, member f 
		where d.prj_knd = 'N'
            and d.prj_id = e.prj_id
            and d.co_url = #{coUrl}
			and e.mem_id = f.mem_id
            and e.prj_perm = 'pm'
            and d.prj_open_perm = 'all'
        <!-- 프로젝트 명으로 검색 -->
		<if test="prjTtl != null and prjTtl != ''">
			and d.prj_ttl like '%' || #{prjTtl} || '%'
		</if>
		union
		select g.prj_id, g.prj_ttl, g.prj_cntn, g.ctgry_id, h.mem_id, i.name, i.wkpo,
			(select count(*) from prj_parti where prj_id = g.prj_id) as partiCnt,
        	(case when exists
        			(select * from prj_parti where mem_id = #{memId} and prj_id = g.prj_id)
        			then 1 else 0 end) as partiyn
        from project g, prj_parti h, member i 
		where g.prj_knd ='N'
            and g.prj_id = h. prj_id
            and g.co_url = #{coUrl}
            and h.mem_id = i.mem_id
            and h.prj_perm = 'pm'
			and g.prj_open_perm = 'part'
            and #{memId} IN (select k.mem_id
                       from project j, prj_parti k
                       where j.prj_knd ='N'
                           and j.prj_id = k. prj_id
                           and j.co_url = #{coUrl}
                           and j.prj_open_perm = 'part')
		<!-- 프로젝트 명으로 검색 -->
		<if test="prjTtl != null and prjTtl != ''">
			and g.prj_ttl like '%' || #{prjTtl} || '%'
		</if>
        order by prj_id asc
	</select>
	
	
	<!-- 즐겨찾기 : 참여 -->
	<select id="joinPrj" resultType="co.plus.prj.pnw.vo.PNWVO">
		select a.*, c.prj_color, (select count(*) from prj_parti where prj_id = a.prj_id) as partiCnt
		from project a, favorite b, prj_parti c
		where b.mem_id = #{memId}
			and b.mem_id = c.mem_id
            and a.prj_id = b.prj_id
    		and a.prj_id = c.prj_id
        order by a.prj_id desc
	</select>

	<!-- 즐겨찾기 : 참여X -->
	<select id="noJoinPrj" resultType="co.plus.prj.pnw.vo.PNWVO">
		select a.*, (select count(*) from prj_parti where prj_id = a.prj_id) as partiCnt,
				(case when exists (select * from prj_parti where mem_id = #{memId} and prj_id = a.prj_id)
                        then (select prj_color from prj_parti where mem_id = #{memId} and prj_id = a.prj_id) 
                		else (select prj_color from prj_parti where prj_perm = 'pm' and prj_id = a.prj_id) 
                end) as prj_color
		from project a, favorite b
		where not exists (select * from prj_parti
            		 where mem_id = #{memId} and prj_id = b.prj_id)
             and b.mem_id = #{memId}
   			 and a.prj_id = b.prj_id 
        order by a.prj_id desc
	</select>
	
	<!-- 프로젝트 폴더 메뉴 -->
	<select id="folderMenu" resultType="co.plus.prj.pnw.vo.PNWVO">
		select fold_id, fold_name
		from mem_prj_fold
		where mem_id = #{memId}
		order by fold_id asc
	</select>
	
	<!-- 스케줄 메뉴 -->
	<select id="allSchedule" resultType="co.plus.prj.pnw.vo.PNWVO">
		select a.noti_id, a.noti_ttl, a.sche_bgn_dt as noti_bgn_dt, a.sche_end_dt as noti_end_dt, c.prj_id, c.prj_ttl,
         		(case when exists (select * from prj_parti where mem_id = #{memId} and prj_id = c.prj_id)
                        then (select prj_color from prj_parti where mem_id = #{memId} and prj_id = c.prj_id) 
                		else (select prj_color from prj_parti where prj_perm = 'pm' and prj_id = c.prj_id) 
                end) as prj_color
		from schedule a, notice_writing b, project c
		where a.noti_id = b.noti_id
	        and b.prj_id = c.prj_id
	        and c.co_url = #{coUrl}
	        and c.prj_open_perm = 'all'
		union
		select d.noti_id, d.noti_ttl, d.sche_bgn_dt as noti_bgn_dt, d.sche_end_dt as noti_end_dt, f.prj_id, f.prj_ttl, g.prj_color
		from schedule d, notice_writing e, project f, prj_parti g
		where d.noti_id = e.noti_id
	        and e.prj_id = f.prj_id
	        and f.co_url = #{coUrl}
	        and f.prj_open_perm = 'part'
	        and f.prj_id = g.prj_id
	        and g.mem_id = #{memId}
		union
		select h.noti_id, h.noti_ttl, h.tsk_bgn_dt as noti_bgn_dt, h.tsk_end_dt as noti_end_dt, j.prj_id, j.prj_ttl,
		         (case when exists (select * from prj_parti where mem_id = #{memId} and prj_id = j.prj_id)
                        then (select prj_color from prj_parti where mem_id = #{memId} and prj_id = j.prj_id) 
                		else (select prj_color from prj_parti where prj_perm = 'pm' and prj_id = j.prj_id) 
                 end) as prj_color
		from task h, notice_writing i, project j
		where h.noti_id = i.noti_id
	        and i.prj_id = j.prj_id
	        and j.co_url = #{coUrl}
	        and j.prj_open_perm = 'all'
		union
		select k.noti_id, k.noti_ttl, k.tsk_bgn_dt as noti_bgn_dt, k.tsk_end_dt as noti_end_dt, m.prj_id, m.prj_ttl, n.prj_color
        from task k, notice_writing l, project m, prj_parti n
        where k.noti_id = l.noti_id
	        and l.prj_id = m.prj_id
	        and m.co_url = #{coUrl}
	        and m.prj_open_perm = 'part'
	        and m.prj_id = n.prj_id
	        and n.mem_id = #{memId}
	</select>
	
	<!-- 프로젝트 폴더 조회 -->
	<select id="prjFolder" resultType="co.plus.prj.pnw.vo.PNWVO">
		select c.prj_color, a.prj_id, a.prj_ttl
		from project a, prj_fold b, mem_prj_fold c
		where a.prj_id = b.prj_id
			and b.fold_id = c.fold_id 
			and b.fold_id = #{foldId}
			and c.mem_id = #{memId}
		order by a.prj_id desc
	</select>

	<!-- 프로젝트 폴더 생성 -->
	<insert id="prjFoldInsert" parameterType="co.plus.prj.pnw.vo.PNWVO">
		insert into mem_prj_fold
		values (foldid.nextval, #{foldName}, #{memId})
	</insert>

	<!-- 프로젝트 폴더 수정 ** -->
	<update id="prjFoldUpdate" parameterType="co.plus.prj.pnw.vo.PNWVO">
		update mem_prj_fold
		set foldName = #{foldName}
		where fold_id = #{foldId}
			and mem_id = #{memId} 
	</update>

	<!-- 프로젝트 폴더 삭제 ** -->
	<delete id="prjFoldDelete" parameterType="co.plus.prj.pnw.vo.PNWVO">
		delete from mem_prj_fold
		where fold_id = #{foldId} and mem_id = #{memId}
	</delete>

	<!-- 프로젝트 색상 설정 -->
	<update id="prjColor" parameterType="co.plus.prj.pnw.vo.PNWVO">
		update prj_parti
		set prj_color = #{prjColor}
		where prj_id = #{prjId}
			and mem_id = #{memId}
	</update>
	
	<!-- 프로젝트 폴더 설정 **-->
	<insert id="prjFoldSet" parameterType="co.plus.prj.pnw.vo.PNWVO">
		insert into prj_fold
		values (#{foldId}, #{prjId})
	</insert>
	
	<!-- 프로젝트 수정 **-->
	<update id="prjUpdate" parameterType="co.plus.prj.pnw.vo.PNWVO">
		update project
		set prj_ttl = #{prjTtl}, prj_open_perm = #{prjOpenPerm}, ctgry_id = #{ctgryId}
		where prj_id = #{prjId}
	</update>
	
	<!-- 프로젝트 삭제 -->
	<delete id="prjDelete" parameterType="co.plus.prj.pnw.vo.PNWVO">
		delete from project
		where prj_id = #{prjId}
	</delete>

	<!-- 프로젝트 : 홈 -->
	<select id="prjInfo" resultType="co.plus.prj.pnw.vo.PNWVO">			<!-- 프로젝트 정보 -->
		select a.*,
			 (case when exists (select * from prj_parti where mem_id = #{memId} and prj_id = a.prj_id)
                   then (select prj_color from prj_parti where mem_id = #{memId} and prj_id = a.prj_id) 
                   else (select prj_color from prj_parti where prj_perm = 'pm' and prj_id = a.prj_id) 
                end) as prj_color,
             (case when exists (select * from favorite where mem_id = #{memId} and prj_id = a.prj_id)
                 then 1 else 0
            end) as favoryn
		from project a
		where a.prj_id = #{prjId}
	</select>
	
	<select id="allEmploys" resultType="co.plus.prj.pnw.vo.PNWVO">
		select a.*
		from member a
		where a.mem_id not in (select mem_id from prj_parti where prj_id = {prjId});
	</select>
	
	<select id="prjTskAllCount" resultType="int">						<!-- 업무 전체 갯수(업무리포트) -->
		select count(*)
		from notice_writing
		where prj_id = #{prjId}
		and noti_knd='task'
	</select>
	
	<select id="prjTskCount" resultType="co.plus.prj.pnw.vo.PNWVO">		<!-- 업무 상태에 따른 갯수(업무리포트)-->
		select c.tsk_prgs, count(c.tsk_prgs) as tskCnt
		from project a, notice_writing b, task c
		where a.prj_id = #{prjId}
            and a.prj_id = b.prj_id
            and b.noti_id = c.noti_id
            group by c.tsk_prgs
	</select>
	
	<select id="pnwPinList" resultType="co.plus.prj.pnw.vo.PNWVO">		<!-- 상단고정 게시글 목록 -->
		select c.*, a.*,
			(case when c.noti_knd = 'task' then (select tsk_prgs from task where noti_id = c.noti_id)
				when c.noti_knd = 'schedule' then (select TO_CHAR(sche_bgn_dt, 'yy/mm/dd hh24:mi')||','||TO_CHAR(sche_end_dt, 'yy/mm/dd hh24:mi') from schedule where noti_id = c.noti_id)
				when c.noti_knd = 'todo' then (select TO_CHAR(RATIO_TO_TODO(c.noti_id)) from dual)
			end) as addlist
		from member a, prj_parti b, board c, pincette d
		where c.prj_id = #{prjId}
			and b.prj_id = c.prj_id
			and c.prj_id = d.prj_id
			and c.noti_id = d.noti_id
            and a.mem_id = c.mem_id
			and a.mem_id = b.mem_id
		order by c.noti_id desc
	</select>
	
	<select id="pnwAllList" resultType="co.plus.prj.pnw.vo.PNWVO">		<!-- 전체 게시글 목록 -->
		select c.*, a.*,
			(case when c.noti_knd = 'task' then (select tsk_prgs from task where noti_id = c.noti_id)
				when c.noti_knd = 'schedule' then (select TO_CHAR(sche_bgn_dt, 'yy/mm/dd hh24:mi')||','||TO_CHAR(sche_end_dt, 'yy/mm/dd hh24:mi') from schedule where noti_id = c.noti_id)
				when c.noti_knd = 'todo' then (select TO_CHAR(RATIO_TO_TODO(c.noti_id)) from dual)
			end) as addlist
		from member a, prj_parti b, board c
		where c.prj_id = #{prjId}
			and b.prj_id = c.prj_id
			and a.mem_id = c.mem_id
			and a.mem_id = b.mem_id
		<!-- 프로젝트 명으로 검색 -->
		<if test="notiTtl != null and notiTtl != ''">
			and c.noti_ttl like '%' || #{notiTtl} || '%'
		</if>
		order by c.noti_id desc
	</select>

	<select id="prjPartiCnt" resultType="int">		<!-- 전체 참여자 수 -->
		select count(*)
		from prj_parti
		where prj_id = #{prjId}
	</select>
	
	<select id="prjPartiList" resultType="co.plus.prj.pnw.vo.PNWVO">		<!-- 전체 참여자 수 -->
		select a.mem_id, a.name, a.wkpo, a.co_url, a.dept, b.prj_perm
		from member a, prj_parti b
		where a.mem_id = b.mem_id
			and b.prj_id = #{prjId}
		order by a.mem_id asc
	</select>
	
	<select id="partiPM" resultType="co.plus.prj.pnw.vo.PNWVO">		<!-- 참여자 목록 : PM -->
		select a.mem_id, a.name, a.wkpo, a.co_url, a.dept, b.prj_perm, c.mem_st
		from member a, prj_parti b, mem_status c
		where a.mem_id = b.mem_id
			and a.mem_id = c.mem_id
			and b.prj_id = #{prjId}
			and b.prj_perm = 'pm'
		order by a.mem_id asc
	</select>

	<select id="partiUser" resultType="co.plus.prj.pnw.vo.PNWVO">		<!-- 참여자 목록 : USER -->
		select a.mem_id, a.name, a.wkpo, a.co_url, a.dept, b.prj_perm, c.mem_st
		from member a, prj_parti b, mem_status c
		where a.mem_id = b.mem_id
			and a.mem_id = c.mem_id
			and b.prj_id = #{prjId}
			and b.prj_perm = 'user'
		order by a.mem_id asc
	</select>

	<select id="partiGuest" resultType="co.plus.prj.pnw.vo.PNWVO">		<!-- 참여자 목록 : GUEST -->
		select a.mem_id, a.name, a.wkpo, a.co_url, a.dept, b.prj_perm, c.mem_st
		from member a, prj_parti b, mem_status c
		where a.mem_id = b.mem_id
			and a.mem_id = c.mem_id
			and b.prj_id = #{prjId}
			and b.prj_perm = 'guest'
		order by a.mem_id asc
	</select>
	
	<!-- <resultMap id="tskList" type="co.plus.prj.pnw.vo.PNWVO"> <result property="" 
		/> <result property="" /> <result property="" /> <collection property="" 
		/> </resultMap> <select id="tskPrgList" resultMap="tskList"> select a.* from 
		project a, member b, prj_parti c where a.prj_id </select> <select id="tskList" 
		resultMap="tskList"> select 1 from dual </select> -->

	<!-- 프로젝트 : 업무 -->
	<select id="tskPrgList" resultType="co.plus.prj.pnw.vo.PNWVO">
		select a.tsk_prgs
		from task a, notice_writing b, project c
		group by a.tsk_prgs
		where a.noti_id = b.noti_id
			and c.prj_id = #{prjId}
			and c.prj_id = b.prj_id
		order by a.noti_id desc
	</select>

	<select id="tskNWList" resultType="co.plus.prj.pnw.vo.PNWVO"> <!-- ** -->
		select a.*, b.prj_id, b.noti_knd, b.mem_id as pic, b.noti_dttm, b.noti_open_perm, c.prj_ttl
		from task a, notice_writing b, project c
		where a.noti_id = b.noti_id
			and c.prj_id = #{prjId}
			and c.prj_id = b.prj_id
		union
		select d.*, e.prj_id, e.noti_knd, e.mem_id as pic, e.noti_dttm, e.noti_open_perm, f.prj_ttl
		from task d, notice_writing e, project f
		where a.noti_id = b.noti_id
			and c.prj_id = #{prjId}
			and c.prj_id = b.prj_id
		order by noti_id desc
	</select>

	<!-- 프로젝트 : 일정 -->
	<select id="scheList" resultType="co.plus.prj.pnw.vo.PNWVO">
		select a.*, b.noti_dttm, b.prj_id, b.noti_open_perm, c.prj_ttl
		from schedule a, notice_writing b, project c
		where a.noti_id = b.noti_id
			and c.prj_id = #{prjId}
			and c.prj_id = b.prj_id
	</select>
	
	<!-- 글 게시글 클릭 -->
	<select id="txtNW"
		resultType="co.plus.prj.nwm.vo.NoticeWritingVO">
		 select  a.* , b.co_url, b.prj_id, b.prj_ttl, c.noti_open_perm, c.noti_dttm, d.name, 
        		(case when exists(select * from bookmark where noti_id = a.noti_id and mem_id = #{memId})
            		then 1 else 0 end) as bmkYn,
		        (case when exists(select * from pincette where prj_id = #{prjId} and noti_id = a.noti_id)
					then 1 else 0 end) as PinYn	
		from text a, project b, board c, member d
		where a.noti_id = c.noti_id 
			and b.prj_id = c.prj_id
			and b.co_url = d.co_url
			and c.mem_id = d.mem_id
			and c.noti_id = #{notiId}
	</select>
	
	<!-- 업무 게시글 클릭 -->
	<select id="tskNW" resultType="co.plus.prj.pnw.vo.PNWVO">
		select a.*,b.noti_ttl as subtsk_ttl, b.subtsk_prgs, b.subtsk_bgn_dt, b.subtsk_end_dt, b.mem_id, c.noti_open_perm, c.noti_dttm, d.prj_id, d.prj_ttl, e.name,
				(case when exists(select * from bookmark where noti_id = a.noti_id and mem_id = #{memId})
		            then 1 else 0 end) as bmkYn,
		        (case when exists(select * from pincette where prj_id = #{prjId} and noti_id = a.noti_id)
					then 1 else 0 end) as PinYn	
		from task a LEFT OUTER JOIN subtask b
		on a.noti_id = b.noti_id2
		     inner join board c on a.noti_id = c.noti_id
		     inner join project d on c.prj_id = d.prj_id
		     inner join member e on c.mem_id = e.mem_id
		where a.noti_id = #{notiId}	
        </select>
	
	<!-- 하위업무 게시글 클릭 -->
	<select id="subtskNW" resultType="co.plus.prj.pnw.vo.PNWVO">
		select a.*, b.name, c.subtsk_cntn, p.prj_ttl,
				(case when exists(select * from bookmark where noti_id = a.noti_id and mem_id = #{memId})
		            then 1 else 0 end) as bmkYn,
		        (case when exists(select * from pincette where prj_id = #{prjId} and noti_id = a.noti_id)
					then 1 else 0 end) as PinYn	
		from board a, member b, subtask c, project p
		where a.mem_id = b.mem_id
			and a.noti_id = c.noti_id
		    and a.prj_id = p.prj_id
			and	a.noti_id = #{notiId}
	</select>
	
	<!-- 일정 게시글 클릭 -->
	<select id="scheNW" resultType="co.plus.prj.pnw.vo.PNWVO">
		select a.*, b.co_url, b.prj_id, b.prj_ttl, c.noti_open_perm, d.name, c.noti_dttm,
				(case when exists(select * from bookmark where noti_id = a.noti_id and mem_id = #{memId})
		            then 1 else 0 end) as bmkYn,
		        (case when exists(select * from pincette where prj_id = b.prj_id and noti_id = a.noti_id)
					then 1 else 0 end) as PinYn	
		from schedule a, project b, board c, member d
		where a.noti_id = c.noti_id 
			and b.prj_id = c.prj_id
			and b.co_url = d.co_url
			and c.mem_id = d.mem_id
			and c.noti_id = #{notiId}
	</select>
	
	<!-- 내 게시물 목록 -> 할일 상세보기(팝업) -->
	<select id="TodoNW" resultType="co.plus.prj.pnw.vo.PNWVO">
		select a.*, b.co_url, b.prj_id, b.prj_ttl, c.noti_open_perm, c.noti_dttm, d.name,
				(case when exists(select * from bookmark where mem_id = #{memId})
					then 1 else 0 end) as bmkYn,
				(case when exists(select * from pincette where prj_id = b.prj_id)
					then 1 else 0 end) as PinYn	
		from todo a, project b, board c, member d
		where a.noti_id = c.noti_id 
			and b.prj_id = c.prj_id
			and b.co_url = d.co_url
			and c.mem_id = d.mem_id
	        and c.noti_id = #{notiId}
	</select>


	<!-- 글 입력 -->
	<insert id="txtInsert" parameterType="co.plus.prj.pnw.vo.PNWVO">
			select * from text
	</insert>

	<!-- 글 수정 -->
	<update id="txtUpdate" parameterType="co.plus.prj.pnw.vo.PNWVO">
			select * from text
	</update>

	<!-- 업무 입력 -->
	<insert id="tskInsert" parameterType="co.plus.prj.pnw.vo.PNWVO">
			select * from text
	</insert>

	<!-- 업무 수정 -->
	<update id="tskUpdate" parameterType="co.plus.prj.pnw.vo.PNWVO">
			select * from text
	</update>

	<!-- 일정 입력 -->
	<insert id="scheInsert" parameterType="co.plus.prj.pnw.vo.PNWVO">
			select * from text
	</insert>

	<!-- 일정 수정 -->
	<update id="scheUpdate" parameterType="co.plus.prj.pnw.vo.PNWVO">
			select * from text
	</update>

	<!-- 할일 입력 -->
	<insert id="todoInsert" parameterType="co.plus.prj.pnw.vo.PNWVO">
			select * from text
	</insert>

	<!-- 할일 수정 -->
	<update id="todoUpdate" parameterType="co.plus.prj.pnw.vo.PNWVO">
			select * from text
	</update>

	<!-- 게시글 삭제 -->
	<delete id="nwDelete" parameterType="co.plus.prj.pnw.vo.PNWVO">
			select * from text
	</delete>

</mapper>